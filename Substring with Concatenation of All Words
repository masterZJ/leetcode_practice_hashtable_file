"""
You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.

For example, given:
s: "barfoothefoobarman"
words: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).


"""

class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        if not s or not words or not words[0] or len(s)<len(words[0]):
            return []
        
        len_word=len(words[0])
        number_of_words=len(words)
        len_sub_str=len_word*number_of_words
        len_str=len(s)
        start_list=[]
        
        counter_of_word=collections.Counter(words)
        
        for spli_type in xrange(len_word):
            count_number_of_sub_word=0
            start_position=spli_type
            counter_of_sub_word=collections.defaultdict(int)
 
            
            for singer_word in xrange(spli_type,len_str-len_word+1,len_word):
                word=s[singer_word:singer_word+len_word]
                
                if word in words:
                    counter_of_sub_word[word]+=1
                    count_number_of_sub_word+=1
                    while counter_of_sub_word[word]>counter_of_word[word]:
                        counter_of_sub_word[s[start_position:start_position+len_word]]-=1
                        start_position=start_position+len_word
                        count_number_of_sub_word-=1
                    if count_number_of_sub_word==number_of_words:                        
                        start_list.append(start_position)
                else:
                    start_position=singer_word+len_word
                    counter_of_sub_word.clear()
                    count_number_of_sub_word=0

                    
        return start_list
                    
                
